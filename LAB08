#EJERCICIO LAB08
from google.colab import files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import io


print("Seleccione el DATASET:")
uploaded = files.upload()
file_name = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[file_name]))
df.columns = df.columns.str.strip().str.lower()

# 2. Explorar el conjunto de datos
print("\nPrimeras filas del dataset:")
print(df.head())

print("\nResumen de clases (calidad del vino):")
print(df['quality'].value_counts())

# 3. Separar variables
X = df.drop(columns=['quality'])
y = df['quality']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Entrenamiento del Árbol de Decisión
modelo = DecisionTreeClassifier(criterion='gini', max_depth=5, random_state=42)
modelo.fit(X_train, y_train)

# 6. Evaluación
y_pred = modelo.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"\nPrecisión del modelo: {accuracy:.2f}")

print("\nReporte de Clasificación:\n", classification_report(y_test, y_pred))

# 7. Matriz de Confusión
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(5, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Matriz de Confusión")
plt.xlabel("Predicción")
plt.ylabel("Real")
plt.show()

# Interpretación básica de matriz
print("\nInterpretación: la diagonal muestra los vinos correctamente clasificados por calidad. "
      "Los valores fuera de la diagonal indican errores. "
      "Podemos ver qué calidades suelen confundirse más.")

# 8. Importancia de características
importancias = pd.Series(modelo.feature_importances_, index=X.columns).sort_values(ascending=False)
print("\n🎯 Características más influyentes en la calidad del vino:")
print(importancias)

# Visualizar importancia
plt.figure(figsize=(10, 6))
sns.barplot(x=importancias.values, y=importancias.index, palette="crest")
plt.title("Importancia de las características")
plt.xlabel("Importancia")
plt.ylabel("Características")
plt.show()

# 9. Visualización simplificada del árbol
plt.figure(figsize=(10, 4))
plot_tree(modelo,
          feature_names=X.columns,
          class_names=[str(c) for c in sorted(y.unique())],
          filled=True,
          rounded=True,
          max_depth=1)
plt.title("Árbol de Decisión (nivel 1)")
plt.show()

